/*
 * -------------------------------------------------
 *  nf-core/nascent Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  cpus = { check_max( 2 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements
  withName:get_software_versions {
    errorStrategy = { task.exitStatus in [0,1,127] ? 'ignore' : 'finish' }
  }
  withName:sra_dump {
    cpus = { params.threadfqdump ? check_max( 8, 'cpus' ) : 1 }
  }
  withName:fastQC {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withName:bbduk_hisat2 {
    cpus = { check_max( 16, 'cpus' ) }
    memory = { check_max( 20.GB * task.attempt, 'memory' ) }
  }
  withName:fastQC_trim {
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  }
  withName:hisat2 {
    cpus = { check_max( 32, 'cpus' ) }
    memory = { check_max( 100.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }
  withName:samtools {
    cpus = { check_max( 16, 'cpus' ) }
    memory = { check_max( 100.GB * task.attempt, 'memory' ) }
  }
  withName:preseq {
    memory = { check_max( 20.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:rseqc {
    memory = { check_max( 40.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:pileup {
    memory = { check_max( 50.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:picard {
    memory = { check_max( 20.GB * task.attempt, 'memory' ) }
  }
  withName:bedgraphs {
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName:dreg_prep {
    memory = { check_max( 100.GB * task.attempt, 'memory' ) }
  }
  withName:normalized_bigwigs {
    memory = { check_max( 30.GB * task.attempt, 'memory' ) }
  }
  withName:igvtools {
    memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) }
  }
  withName: multiQC {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 13.GB
  max_cpus = 7
  max_time = 240.h
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  saveReference = true
}
